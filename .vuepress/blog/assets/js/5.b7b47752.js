(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{230:function(v,_,t){v.exports=t.p+"assets/img/19.f5adf785.png"},231:function(v,_,t){v.exports=t.p+"assets/img/20.e8535dae.png"},232:function(v,_,t){v.exports=t.p+"assets/img/21.4cf371a2.png"},233:function(v,_,t){v.exports=t.p+"assets/img/22.d83736f9.png"},234:function(v,_,t){v.exports=t.p+"assets/img/23.706e16bb.png"},266:function(v,_,t){"use strict";t.r(_);var a=t(28),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"js垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js垃圾回收"}},[v._v("#")]),v._v(" JS垃圾回收")]),v._v(" "),a("p",[v._v("上一篇中我们讲到了，JS数据存储。那当数据量到达一定程度后，会存在很多不需要使用的数据，此时怎么对这部分数据进行处理呢？")]),v._v(" "),a("h2",{attrs:{id:"栈（调用栈）空间中的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈（调用栈）空间中的垃圾回收"}},[v._v("#")]),v._v(" 栈（调用栈）空间中的垃圾回收")]),v._v(" "),a("p",[v._v("我们可以知道，JS中存在一个调用栈，当执行一"),a("strong",[v._v("个函数时，会新建一个执行上下文并插入到调用栈中。同时调用栈中会有一个记录当前执行状态的指针（称为 ESP）")]),v._v("，指向调用栈中的该函数的执行上下文，表示当前正在执行 该函数。")]),v._v(" "),a("p",[v._v("所以，当函数执行完毕后，该函数的执行上下文就会出栈销毁，ESP指针下移执行下一个执行函数的执行上下文。（销毁的意思是，该内存会被标记为无效内存，当有新的函数需要执行时，该内存就会被新的需要执时，就会被覆盖掉，用来存放新函数的执行上下文）")]),v._v(" "),a("p",[v._v("所以说，当一个函数执行结束之后，"),a("strong",[v._v("JavaScript 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文")]),v._v("。")]),v._v(" "),a("h2",{attrs:{id:"堆空间的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆空间的垃圾回收"}},[v._v("#")]),v._v(" 堆空间的垃圾回收")]),v._v(" "),a("p",[a("strong",[v._v("要回收堆中的垃圾数据，就需要用到 JavaScript 中的垃圾回收器了")]),v._v("。在这之前需要先了解**代际假说（The Generational Hypothesis）**这个概念，后续垃圾回收的策略都是建立在该假说的基础之上的。")]),v._v(" "),a("p",[a("strong",[v._v("代际假说")]),v._v("有以下两个特点：")]),v._v(" "),a("ul",[a("li",[v._v("第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；")]),v._v(" "),a("li",[v._v("第二个是不死的对象，会活得更久。")])]),v._v(" "),a("p",[v._v("在 V8 中会把堆分为"),a("strong",[v._v("新生代")]),v._v("和"),a("strong",[v._v("老生代")]),v._v("两个区域，"),a("strong",[v._v("新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象")]),v._v("。")]),v._v(" "),a("p",[v._v("新生区通常只支持 1～8M 的容量，而老生区支持的容量就大很多了。对于这两块区域，V8 分别使用两个不同的垃圾回收器，以便更高效地实施垃圾回收。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("副垃圾回收器，主要负责新生代的垃圾回收。")])]),v._v(" "),a("li",[a("strong",[v._v("主垃圾回收器，主要负责老生代的垃圾回收。")])])]),v._v(" "),a("p",[v._v("虽然新老生代使用不同的垃圾回收器来回收，但是都有一套共同的流程：")]),v._v(" "),a("ol",[a("li",[v._v("标记空间中活动对象和非活动对象。")]),v._v(" "),a("li",[v._v("回收非活动对象所占据的内存。")]),v._v(" "),a("li",[v._v("内存整理。")])]),v._v(" "),a("h3",{attrs:{id:"副垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副垃圾回收器"}},[v._v("#")]),v._v(" 副垃圾回收器")]),v._v(" "),a("p",[v._v("副垃圾回收器主要负责新生区的垃圾回收。而通常情况下，大多数小的对象都会被分配到新生区，所以说这个区域虽然不大，但是垃圾回收还是比较频繁的。")]),v._v(" "),a("p",[v._v("新生代中用 "),a("strong",[v._v("Scavenge 算法")]),v._v("来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域，如下图所示：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(230),alt:"新生代堆空间"}})]),v._v(" "),a("p",[v._v("新加入的对象都会存放到对象区域，当对象区域占用率到达一定程度时，就需要执行一次垃圾清理操作。")]),v._v(" "),a("p",[v._v("在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。")]),v._v(" "),a("p",[v._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种"),a("strong",[v._v("角色翻转的操作还能让新生代中的这两块区域无限重复使用下去")]),v._v("。")]),v._v(" "),a("p",[v._v("由于新生代中采用的 Scavenge 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以"),a("strong",[v._v("为了执行效率，一般新生区的空间会被设置得比较小")]),v._v("。")]),v._v(" "),a("p",[v._v("也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了"),a("strong",[v._v("对象晋升策略")]),v._v("，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")]),v._v(" "),a("h3",{attrs:{id:"主垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主垃圾回收器"}},[v._v("#")]),v._v(" 主垃圾回收器")]),v._v(" "),a("p",[v._v("主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。")]),v._v(" "),a("p",[v._v("由于老生区的对象比较大，若要在老生区中使用 Scavenge 算法进行垃圾回收，复制这些大的对象将会花费比较多的时间，从而导致回收执行效率不高，同时还会浪费一半的空间。因而，主垃圾回收器是采用 "),a("strong",[v._v("标记 - 清除（Mark-Sweep)算法")]),v._v("进行垃圾回收的。下面我们来看看该算法是如何工作的。")]),v._v(" "),a("p",[v._v("首先是标记过程阶段。标记阶段就是从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为"),a("strong",[v._v("活动对象")]),v._v("，没有到达的元素就可以判断为"),a("strong",[v._v("垃圾数据")]),v._v("。")]),v._v(" "),a("p",[v._v("接下来就是垃圾的清除过程。它和副垃圾回收器的垃圾清除过程完全不同，你可以理解这个过程是清除掉红色标记数据的过程，可参考下图大致理解下其清除过程：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(231),alt:"标记清除过程"}})]),v._v(" "),a("p",[v._v("上面的标记过程和清除过程就是标记 - 清除算法，不过对一块内存多次执行标记 - 清除算法后，会产生大量不连续的内存碎片。而碎片过多会导致大对象无法分配到足够的连续内存，于是又产生了另外一种算法——"),a("strong",[v._v("标记 - 整理（Mark-Compact）算法")]),v._v("，这个标记过程仍然与标记 - 清除算法里的是一样的，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。你可以参考下图：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(232),alt:"标记整理"}})]),v._v(" "),a("h3",{attrs:{id:"全停顿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全停顿"}},[v._v("#")]),v._v(" 全停顿")]),v._v(" "),a("p",[v._v("现在你知道了 V8 是使用副垃圾回收器和主垃圾回收器处理垃圾回收的，不过由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿（Stop-The-World）。")]),v._v(" "),a("p",[v._v("比如堆中的数据有 1.5GB，V8 实现一次完整的垃圾回收需要 1 秒以上的时间，这也是由于垃圾回收而引起 JavaScript 线程暂停执行的时间，若是这样的时间花销，那么应用的性能和响应能力都会直线下降。主垃圾回收器执行一次完整的垃圾回收流程如下图所示：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(233),alt:"全停顿"}})]),v._v(" "),a("p",[v._v("在 V8 新生代的垃圾回收中，因其空间较小，且存活对象较少，所以全停顿的影响不大，但老生代就不一样了。如果在执行垃圾回收的过程中，占用主线程时间过久，就像上面图片展示的那样，花费了 200 毫秒，在这 200 毫秒内，主线程是不能做其他事情的。比如页面正在执行一个 JavaScript 动画，因为垃圾回收器在工作，就会导致这个动画在这 200 毫秒内无法执行的，这将会造成页面的卡顿现象。")]),v._v(" "),a("p",[v._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为"),a("strong",[v._v("增量标记（Incremental Marking）算法")]),v._v("。如下图所示：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(234),alt:"增量标记"}})]),v._v(" "),a("p",[v._v("使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。")])])}),[],!1,null,null,null);_.default=s.exports}}]);