(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{226:function(t,e,a){t.exports=a.p+"assets/img/18.26652b30.png"},257:function(t,e,a){"use strict";a.r(e);var s=a(28),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js中的数据存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的数据存储"}},[t._v("#")]),t._v(" JS中的数据存储")]),t._v(" "),s("p",[t._v("我们先来看一下JS中的大致内存模型：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(226),alt:"JS内存模型"}})]),t._v(" "),s("p",[t._v("从图中可以看出， 在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是"),s("strong",[t._v("代码空间")]),t._v("、"),s("strong",[t._v("栈空间")]),t._v("和"),s("strong",[t._v("堆空间")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"栈和堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈和堆"}},[t._v("#")]),t._v(" 栈和堆")]),t._v(" "),s("p",[t._v("其中代码空间主要是存储可执行代码的，"),s("strong",[t._v("而值类型的数据值都是直接保存在“栈”中的，引用类型的值是存放在“堆”中的")]),t._v("。这里的栈空间就是我们之前反复提及的调用栈，是用来存储执行上下文的。")]),t._v(" "),s("p",[t._v("那为什么不能全部都放在栈空间进行处理呢？")]),t._v(" "),s("p",[t._v("这是因为 JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。")]),t._v(" "),s("p",[t._v("比如一个函数执行结束了，JavaScript 引擎需要离开当前的执行上下文，只需要将指针下移到上个执行上下文的地址就可以了，该函数执行上下文栈区空间全部回收。")]),t._v(" "),s("p",[t._v("所以"),s("strong",[t._v("通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据")]),t._v("。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，"),s("strong",[t._v("堆空间很大，能存放很多大的数据")]),t._v("，不过缺点是分配内存和回收内存都会占用一定的时间。")]),t._v(" "),s("p",[t._v("在 JavaScript 中，"),s("strong",[t._v("赋值操作和其他语言有很大的不同，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("p",[t._v("所以现在我们也了解了，值类型的数据是存放在栈空间的，引用类型的数据是存放在堆空间的。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('function foo() {\n    var myName = "test"\n    let test1 = 1\n    const test2 = 2\n    var innerBar = {\n        getName:function(){\n            console.log(test1) // 1 1\n            return myName\n        },\n        setName:function(newName){\n            myName = newName\n        }\n    }\n    return innerBar\n}\nvar bar = foo()\nbar.setName("test2")\nbar.getName()\nconsole.log(bar.getName()) // test2\n')])])]),s("p",[t._v("当函数执行完毕时，当前执行上下文会弹出调用栈进行销毁，所以在函数内部的变量或方法理应同样会被销毁，但是再闭包中，当闭包中的变量被外部方法引用时, 如上面代码中的 myname test1 并没有被销毁，这是为什么呢？")]),t._v(" "),s("p",[t._v("要解释这个现象，我们就得站在内存模型的角度来分析这段代码的执行流程。")]),t._v(" "),s("ul",[s("li",[t._v("当 JavaScript 引擎执行到 foo 函数时，首先会编译，并创建一个空执行上下文。")]),t._v(" "),s("li",[t._v("在编译过程中，遇到内部函数 setName，JavaScript 引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了 foo 函数中的 myName 变量，由于是内部函数引用了外部函数的变量，所以 JavaScript 引擎判断这是一个闭包，于是在堆空间创建换一个“closure(foo)”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存 myName 变量。")]),t._v(" "),s("li",[t._v("接着继续扫描到 getName 方法时，发现该函数内部还引用变量 test1，于是 JavaScript 引擎又将 test1 添加到“closure(foo)”对象中。这时候堆中的“closure(foo)”对象中就包含了 myName 和 test1 两个变量了。")]),t._v(" "),s("li",[t._v("由于 test2 并没有被内部函数引用，所以 test2 依然保存在调用栈中。")])]),t._v(" "),s("p",[t._v("所以，当执行到 foo 函数时，闭包就产生了；当 foo 函数执行结束之后，返回的 getName 和 setName 方法都引用“clourse(foo)”对象，所以即使 foo 函数退出了，“clourse(foo)”依然被其内部的 getName 和 setName 方法引用。所以在下次调用bar.setName或者bar.getName时，创建的执行上下文中就包含了“clourse(foo)”。")])])}),[],!1,null,null,null);e.default=r.exports}}]);