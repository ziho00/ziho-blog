(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{246:function(e,t,n){"use strict";n.r(t);var s=n(28),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"移动端px转rem的自适应方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移动端px转rem的自适应方案"}},[e._v("#")]),e._v(" 移动端px转rem的自适应方案")]),e._v(" "),n("p",[e._v("在写移动端的应用时，在一种机型的CSS方案用在另一种机型时，很可能就不适用了，所以现在也有很多的方案来解决类似的问题。其中一个就是使用rem的方式来写CSS。")]),e._v(" "),n("p",[n("strong",[e._v("首先我们要先确定每个rem的值在所有机型的相对大小都是一样的")])]),e._v(" "),n("p",[e._v("rem在浏览器的原始值为16px(16px为font-size的默认值)。但16px在不同分辨率的机型中，大小占比显然是不一样的，所以我们就要改变font-size的值来实现rem的自适应(1rem相当于屏幕宽度的1/10)。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const baseSize = 32 // 设置一个基准值\nfunction setRem() {\n    // 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。\n    const scale = document.documentElement.clientWidth / 750\n    // 设置页面根节点字体大小\n    document.documentElement.style.fontSize = baseSize * Math.min(scale, 2) + 'px'\n}\nsetRem()\n/*\n* 当窗口改变时重新设置rem\n*/\nwindow.onresize = function() {\n    setRem()\n}\n")])])]),n("p",[e._v("可以把上面的一段代码放在项目的入口文件中，这样就实现了简单的rem自适应了")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/amfe/article/issues/17",target:"_blank",rel:"noopener noreferrer"}},[e._v("想知道更多详情戳这里~~"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);