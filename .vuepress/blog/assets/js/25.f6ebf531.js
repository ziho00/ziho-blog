(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{263:function(t,s,n){"use strict";n.r(s);var a=n(28),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"js-中的-this-指向"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-中的-this-指向"}},[t._v("#")]),t._v(" JS 中的 this 指向")]),t._v(" "),n("p",[t._v("在JS中，"),n("strong",[t._v("this指向其实是跟指向上下文/执行环境绑定的")])]),t._v(" "),n("h2",{attrs:{id:"全局执行上下文-中的-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局执行上下文-中的-this"}},[t._v("#")]),t._v(" 全局执行上下文 中的 this")]),t._v(" "),n("p",[t._v("当我们在全局环境下执行下面代码时")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("console.log(this)\n")])])]),n("p",[t._v("会发现打印出来的结果为window对象，所以我们可以得知，在全局执行环境中的this指向为window对象，这也是作用域链最开始的节点。")]),t._v(" "),n("h2",{attrs:{id:"函数执行上下文-中的-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数执行上下文-中的-this"}},[t._v("#")]),t._v(" 函数执行上下文 中的 this")]),t._v(" "),n("h3",{attrs:{id:"默认调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认调用"}},[t._v("#")]),t._v(" 默认调用")]),t._v(" "),n("p",[t._v("我们再来看下面的代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function foo () {\n    console.log(this)\n}\nfoo()\n")])])]),n("p",[t._v("我们发现控制台输出的还是window对象，这也说明在全局环境中调用一个函数时，this指向为全局对象window。")]),t._v(" "),n("p",[t._v("那我们能改变函数中的this指向吗?")]),t._v(" "),n("p",[t._v("当然!JS还为我们提供了相应的方法 apply / call / bind")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('this.name = "test"\n\nlet obj = {\n    name: "test2"\n}\n\nfunction say() {\n    console.log(this.name)\n}\nsay() // test\nsay.call(obj) // test2\n')])])]),n("p",[t._v("apply/call/bind功能都是相似的，只是使用方法的不同，详情可以自行到 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),n("OutboundLink")],1),t._v(" 上查看")]),t._v(" "),n("h3",{attrs:{id:"对象调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象调用"}},[t._v("#")]),t._v(" 对象调用")]),t._v(" "),n("p",[t._v("当一个对象调用自身方法时，this指向为该对象本身")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('let obj = {\n    name: "ziho",\n    say: function() {\n        console.log(this.name)\n    }\n}\nobj.say() // ziho\n\nlet fn = obj.say\nfn() // \n')])])]),n("p",[t._v("上面的结果为 ziho 和 没有值，这也反应了在全局中调用的函数，this 指向为 window")]),t._v(" "),n("h3",{attrs:{id:"通过构造函数设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过构造函数设置"}},[t._v("#")]),t._v(" 通过构造函数设置")]),t._v(" "),n("p",[t._v("当我们使用构造函数new了一个实例时，实例 this 指向谁？")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('function Obj() {\n    this.name = "ziho"\n    this.say = function() {\n        console.log(this.name)\n    }\n}\n\nvar obj = new Obj()\n')])])]),n("p",[t._v("首先我们要先理清楚在 ==new== 的过程中发生了什么？\n我们把上面代码作为例子分析：")]),t._v(" "),n("ul",[n("li",[t._v("首先创建一个空对象 o")]),t._v(" "),n("li",[t._v("调用 Obj.call(o) 所以当调用构造函数时 构造函数的执行上下文中的this 就是该对象")]),t._v(" "),n("li",[t._v("执行 o."),n("strong",[t._v("proto")]),t._v(" = Obj.prototype (在JS原型链中，实例中存在一个属性__proto__ 指向 原型对象 *.prototype)")]),t._v(" "),n("li",[t._v("然后调用构造函数，在构造函数中 this 指向对象 o")]),t._v(" "),n("li",[t._v("返回对象 o 赋值给 变量 obj")])]),t._v(" "),n("blockquote",[n("p",[t._v("new 实现")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function myNew () {\n    let fn = Array.prototype.shift.call(arguments) // 伪数组使用shift方法\n    if(typeof fn !== 'function'){\n        throw new TypeError(`${fn} is not a function`)\n    }\n    let o = new Object()\n    o.__proto__ = fn.prototype\n    let res = fn.apply(o, arguments)\n    return res instanceof Obj ? res : o\n}\n")])])]),n("p",[t._v("所以通过new创建的对象，在构造函数中，this 指向就是该对象")]),t._v(" "),n("p",[t._v("但是 this 的设计也有很多缺陷，如：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\nvar myObj = {\n  name : "test", \n  showThis: function(){\n    console.log(this) // { name: "test", showThis: fn }\n    function bar(){\n        console.log(this) // window对象\n        }\n    bar()\n  }\n}\nmyObj.showThis()\n')])])]),n("p",[t._v("从上面的代码我们看到 首先输出的 this 指向为该实例myObj,但是再接下来的bar()中输出的却是 window 对象，这个结果就让人不解了。这是因为在JS中，"),n("strong",[t._v("嵌套函数中的 this 不会从外层函数中继承")]),t._v("，所以为了解决这样的问题我们通常会用一个变量保存当前执行上下文的this，防止this指向在意料之外的位置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('showThis: function(){\n    console.log(this) // { name: "test", showThis: fn }\n    let self = this\n    function bar(){\n        console.log(self) // { name: "test", showThis: fn }\n        }\n    bar()\n}\n')])])]),n("h2",{attrs:{id:"es6箭头函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6箭头函数"}},[t._v("#")]),t._v(" ES6箭头函数")]),t._v(" "),n("p",[t._v("ES6中的箭头函数也可以解决上面的问题")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('showThis: function(){\n    console.log(this) // { name: "test", showThis: fn }\n    let bar = () => {\n        console.log(this) // { name: "test", showThis: fn }\n    }\n    bar()\n}\n')])])]),n("p",[t._v("这是因为 ES6 中的"),n("strong",[t._v("箭头函数并不会创建其自身的执行上下文，所以箭头函数中的 this 取决于它的外部函数，即箭头函数的 this 就是它外层函数的 this")]),t._v("。")]),t._v(" "),n("p",[t._v("还有一个缺陷就是从默认调用的函数this指向为window对象")]),t._v(" "),n("p",[t._v("因为这样会导致发送很多意料之外的错误，也很容易打破数据边界。所以，如果要让函数的执行上下文的this指向某个对象，最好还是使用call/apply来操作。或者设置 JS 的严格模式，这样当默认调用函数时函数执行上下文的this指向为undefined。")])])}),[],!1,null,null,null);s.default=e.exports}}]);